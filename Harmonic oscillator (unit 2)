import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import eigh
from tabulate import tabulate  # For displaying data in a table format

# Constants (in SI units)
h = 1.05e-34        # Planck's constant (J·s)
m = 9.1e-31         # Mass of electron (kg)
n = 4               # Number of eigenstates to plot

# Given parameters
L = 1.5e-9          # Size of the system (length of the potential well, in meters)
N = 1000            # Number of spatial points for discretization
k = 1               # Force constant for harmonic potential (N/m)
x = np.linspace(-L, L, N)  # Spatial domain from -L to L
d = x[1] - x[0]     # Step size in spatial grid

# Initialize the Hamiltonian matrix (A) for the kinetic energy term
A = np.zeros((N, N))
for i in range(1, N-1):
    A[i, i-1] = -1/d**2      # Off-diagonal elements (discretized second derivative)
    A[i, i] = 2/d**2         # Diagonal elements
    A[i, i+1] = -1/d**2      # Off-diagonal elements

# Boundary conditions for A (consistent for finite differences)
A[-1, -1] = A[0, 0] = 2/d**2
A[-1, -2] = A[0, 1] = -1/d**2

# Initialize the potential energy vector (B) for the harmonic oscillator potential
B = np.zeros(N)
for i in range(N):
    if abs(x[i]) <= L:
        B[i] = 0.5 * k * (x[i])**2  # Harmonic potential: V(x) = 0.5 * k * x^2
    else:
        pass  # Outside the potential well, potential remains zero

# Multiply the matrix A by constants to represent the kinetic energy term
A = A * h**2 / (2 * m)

# Construct the total Hamiltonian H = A + B, where B is the diagonal potential term
H = A + np.diag(B)

# Solve the eigenvalue problem for the Hamiltonian H
val, vec = eigh(H)

# Plot the first 'n' eigenfunctions corresponding to the lowest eigenvalues
plt.figure(figsize=(10, 6))  # Set figure size to 10x6 inches
for i in range(n):
    plt.plot(x, vec[:, i], label=f'State {i+1}: Eigenvalue {np.round((val[i] / 1.6e-19), 3)} eV')  # State and eigenvalue in eV

# Plot formatting
plt.axhline(color='black')  # Horizontal line at y=0
plt.xlabel('x', fontweight='bold')
plt.ylabel('$ \psi(x)$', fontweight='bold')
plt.title('Eigenfunctions for Harmonic Potential')
plt.grid()
plt.legend(fontsize=8, loc='upper left')
plt.show()

# Function for the harmonic potential (for plotting potential shape)
def V(y):
    return 0.5 * k * (y)**2

# Plot the probability densities (|ψ(x)|^2) of the first 'n' eigenstates
plt.figure(figsize=(10, 6))  # Set figure size to 10x6 inches
x1 = np.linspace(-1, 1, 50)  # For potential plot
a = 0  # Offset to separate plots of different eigenstates

for i in range(n):
    plt.plot(x * 1e9, vec[:, i]**2 + a, label=f'State {i+1}: Eigenvalue {np.round((val[i] / 1.6e-19), 3)} eV')  # State number and eigenvalue in eV
    a += max(vec[:, 0]**2) + 0.002  # Adjust vertical spacing for readability

# Plot the harmonic potential on the same graph
plt.plot(x1, 0.05 * V(x1))  # Scaled potential for visualization
plt.axhline(color='black')

# Plot formatting
plt.xlabel('x (nm)', fontweight='bold')
plt.ylabel('$ |\psi(x)|^2$', fontweight='bold')
plt.title('Probability Densities $|\psi(x)|^2$ of the Harmonic Oscillator')
plt.grid()
plt.legend(fontsize=8, loc='lower left')
plt.show()

# Calculate theoretical and calculated eigenvalues and compare
omega = np.sqrt(k / m)  # Angular frequency for harmonic oscillator
data = []

# Create a table comparing theoretical and calculated eigenvalues
for i in range(n):
    E = (i + 0.5) * h * omega  # Theoretical energy: (n + 1/2)ħω
    E = E / 1.6e-19  # Convert energy from J to eV
    E_cal = val[i] / 1.6e-19  # Calculated eigenvalue (in eV)
    data.append([f'State {i+1}', E, E_cal, abs(E - E_cal)])  # State number, theoretical, calculated, difference

# Print the comparison table
head = ['State', 'Theoretical Eigenvalue (eV)', 'Calculated Eigenvalue (eV)', 'Difference (eV)']
print(tabulate(data, headers=head, tablefmt="grid"))
