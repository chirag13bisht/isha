import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import eigh
from tabulate import tabulate  # For displaying data in table format

# Constants and parameters
h = 1.05e-34                         # Planck's constant
m = 9.1e-31                          # Mass of electron
n = 4                                 # Number of energy states
V = 14 * 1.6e-19                     # Potential energy (14 eV)
L = 2e-10                            # Well width
N = 2000                             # Number of points for x
x = np.linspace(-L-3e-10, L+3e-10, N)# x range
d = x[1] - x[0]                      # Step size

# Construct Hamiltonian matrix for kinetic energy
A = np.zeros((N,N))
for i in range(1, N-1):
    A[i,i-1] = A[i,i+1] = -1/d**2
    A[i,i] = 2/d**2
A[-1,-1] = A[0,0] = 2/d**2           # Boundary conditions
A[-1,-2] = A[0,1] = -1/d**2

# Add potential energy term
B = np.zeros(N)
for i in range(N):
    if abs(x[i]) <= L:               # Inside the potential well
        B[i] = -2 * m * V / h**2

H = A + np.diag(B)                   # Total Hamiltonian

# Solve for eigenvalues and eigenfunctions
val, vec = eigh(H)
val = val * h**2 / (2*m)             # Convert eigenvalues to energy units

# Set the figure size for eigenfunctions plot
plt.figure(figsize=(10, 6))

# Plot the eigenfunctions
for i in range(n):
    plt.plot(x, vec[:,i], label=f'State {i+1}: Eigenvalue {np.round(val[i]/1.6e-19, 3)} eV')

# Plot the potential well boundaries
plt.axvline(L, linestyle='dotted', color='black')
plt.axvline(-L, linestyle='dotted', color='black')

# Plot formatting
plt.title('Eigenfunctions for Finite Potential Well')
plt.axhline(color='black')  # Horizontal line at y=0
plt.xlabel('x (meters)', fontweight='bold')
plt.ylabel('$\psi(x)$', fontweight='bold')
plt.grid()
plt.legend(fontsize=8, loc='upper left')
plt.show()

# Set the figure size for probability densities plot
plt.figure(figsize=(10, 6))

# Plot the probability densities (|Ïˆ(x)|^2)
for i in range(n):
    plt.plot(x, vec[:, i]**2, label=f'Probability Density State {i+1}')

# Plot the potential well boundaries
plt.axvline(L, linestyle='dotted', color='black')
plt.axvline(-L, linestyle='dotted', color='black')

# Plot formatting
plt.title('Probability Densities $|\psi(x)|^2$ for Finite Potential Well')
plt.axhline(color='black')  # Horizontal line at y=0
plt.xlabel('x (meters)', fontweight='bold')
plt.ylabel('$|\psi(x)|^2$', fontweight='bold')
plt.grid()
plt.legend(fontsize=8, loc='upper left')
plt.show()

# Calculate theoretical eigenvalues for particle in a box
theoretical_vals = [(i + 1)**2 * (np.pi)**2 * h**2 / (8 * m * L**2) for i in range(n)]

# Convert them to eV
theoretical_vals_eV = [val / 1.6e-19 for val in theoretical_vals]

# Prepare data for comparison table
data = []
for i in range(n):
    data.append([i + 1, np.round(theoretical_vals_eV[i], 3), np.round(val[i]/1.6e-19, 3), 
                 np.round(abs(theoretical_vals_eV[i] - val[i]/1.6e-19), 3)])

# Print the comparison table
head = ['State', 'Theoretical Eigenvalue (eV)', 'Calculated Eigenvalue (eV)', 'Difference (eV)']
print(tabulate(data, headers=head, tablefmt="grid"))
